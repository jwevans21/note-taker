import type {
   GetServerSidePropsContext,
   GetServerSideProps,
   NextPage,
} from 'next';
import type { File, Folder } from '../utils/files.types';
import { withSessionSsr } from '../utils/withSession';
import React from 'react';
import Head from 'next/head';
import parseHtml from 'html-react-parser';
import styles from '../styles/Home.module.scss';
import { editor } from '../utils/code-mirror';
import { parseMarkdown } from '../utils/markdown-it';
import Link from 'next/link';

type Data = {
   files: File[] | null;
   folders: Folder[] | null;
   name: string;
};

const Home: NextPage<Data> = ({ files, folders, name }) => {
   const inputRef = React.useRef<HTMLDivElement>(null);
   const outputRef = React.useRef<HTMLDivElement>(null);

   const [code, setCode] = React.useState(files ? files[0].content : '');

   React.useEffect(() => {
      if (inputRef.current && outputRef.current) {
         const cm = editor(inputRef, code, setCode);

         return () => {
            cm.destroy();
         };
      }
   }, []);

   function populateFiles(files: File[]) {
      if (files.length === 0) return null;
      return files.map((file) => {
         return (
            <div key={file.id} className={styles.file}>
               <div className={styles.fileName}>{file.name}</div>
            </div>
         );
      });
   }

   function populateFolders(folders: Folder[]) {
      if (folders.length === 0) return null;
      return folders.map((folder) => {
         return (
            <div key={folder.id} className={styles.folder}>
               <div className={styles.folderName}>{folder.name}</div>
               {populateFolders(folder.folders || [])}
               {populateFiles(folder.files || [])}
            </div>
         );
      });
   }

   return (
      <div className={styles.container}>
         <Head>
            <title>Note Taker</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
         </Head>
         <header className={styles.header}>
            <h1 className={styles.brand}>Note Taker</h1>

            <div className={styles.dropdown}>
               <div className={styles.content}>
                  <span className={styles.name}>{name}</span>
               </div>
               <ul className={styles.list}>
                  <li className={styles.item}>
                     <Link href='/settings'>
                        <a>Settings</a>
                     </Link>
                  </li>
                  <li className={styles.item}>
                     <Link href='/api/logout'>
                        <a>Logout</a>
                     </Link>
                  </li>
               </ul>
            </div>
         </header>
         <aside className={styles.sidebar}>
            {folders && populateFolders(folders)}
            {files && populateFiles(files)}
         </aside>
         <main className={styles.main}>
            <section className={styles.editor}>
               <div ref={inputRef}></div>
            </section>
            <section className={styles.preview}>
               <div ref={outputRef}>{parseHtml(parseMarkdown(code))}</div>
            </section>
         </main>
      </div>
   );
};

export const getServerSideProps: GetServerSideProps = withSessionSsr(
   async (context: GetServerSidePropsContext) => {
      const session = context.req.session || null;

      const user = session.user || null;

      if (!user) {
         return {
            redirect: {
               destination: '/login',
               permanent: false,
            },
         };
      }

      const data: Data = {
         folders: [
            {
               id: '1',
               name: 'Folder 1',
               files: [
                  {
                     id: '1',
                     name: 'File 1',
                     content: '',
                     createdAt: new Date().toISOString(),
                     updatedAt: new Date().toISOString(),
                  },
               ],
               folders: [
                  {
                     id: '1',
                     name: 'Folder 2',
                     files: [
                        {
                           id: '1',
                           name: 'File 2',
                           content: '',
                           createdAt: new Date().toISOString(),
                           updatedAt: new Date().toISOString(),
                        },
                     ],
                     folders: null,
                     createdAt: new Date().toISOString(),
                     updatedAt: new Date().toISOString(),
                  },
               ],
               createdAt: new Date().toISOString(),
               updatedAt: new Date().toISOString(),
            },
         ],
         files: [
            {
               name: 'README.md',
               id: 'README.md',
               createdAt: '2020-01-01T00:00:00.000Z',
               updatedAt: '2020-01-01T00:00:00.000Z',
               content: '# Hello World\n\nThis is a simple markdown file.',
            },
         ],
         name: user ? (user.name ? user.name : '') : '',
      };

      return {
         props: {
            files: data.files || null,
            folders: data.folders || null,
            name: data.name,
         },
      };
   }
);

export default Home;
